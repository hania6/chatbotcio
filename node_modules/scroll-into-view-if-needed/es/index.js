function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import compute from './compute';
var supportsScrollBehavior;
export default (function (target, maybeOptions) {
  if (maybeOptions === void 0) {
    maybeOptions = true;
  }

  var options = {};

  if (supportsScrollBehavior === undefined) {
    supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;
  }

  if (maybeOptions === true || maybeOptions === null) {
    options = {
      block: 'start',
      inline: 'nearest'
    };
  } else if (maybeOptions === false) {
    options = {
      block: 'end',
      inline: 'nearest'
    };
  } else if (maybeOptions === Object(maybeOptions)) {
    options = Object.keys(maybeOptions).length === 0 ? {
      block: 'start',
      inline: 'nearest'
    } : _extends({
      block: 'center',
      inline: 'nearest'
    }, maybeOptions);
  }

  var _options = options,
      _options$behavior = _options.behavior,
      behavior = _options$behavior === void 0 ? 'auto' : _options$behavior,
      computeOptions = _objectWithoutProperties(_options, ["behavior"]);

  var instructions = compute(target, computeOptions);

  if (typeof behavior == 'function') {
    return behavior(instructions);
  }

  instructions.forEach(function (_ref) {
    var el = _ref.el,
        top = _ref.top,
        left = _ref.left;

    if (el.scroll && supportsScrollBehavior) {
      el.scroll({
        top: top,
        left: left,
        behavior: behavior
      });
    } else {
      if (el === document.documentElement) {
        window.scrollTo(left, top);
      } else {
        el.scrollTop = top;
        el.scrollLeft = left;
      }
    }
  });
});